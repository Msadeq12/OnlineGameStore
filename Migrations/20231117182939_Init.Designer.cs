// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PROG3050_HMJJ.Models.DataAccess;

#nullable disable

namespace PROG3050_HMJJ.Migrations
{
    [DbContext(typeof(GameStoreDbContext))]
    [Migration("20231117182939_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Addresses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SameAddress")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Countries", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Canada"
                        },
                        new
                        {
                            ID = 2,
                            Name = "US"
                        });
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Languages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "English"
                        },
                        new
                        {
                            ID = 2,
                            Name = "French"
                        },
                        new
                        {
                            ID = 3,
                            Name = "German"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Swedish"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Spanish"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Hindi"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Bengali"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Persian"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Japanese"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Italian"
                        });
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.MailingAddresses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AddressesID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AddressesID");

                    b.HasIndex("RegionsID");

                    b.ToTable("MailingAddresses");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Preferences", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("LanguagesID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("LanguagesID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Profiles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RecievePromotions")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Regions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CountriesID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountriesID");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CountriesID = 1,
                            Name = "Alberta"
                        },
                        new
                        {
                            ID = 2,
                            CountriesID = 1,
                            Name = "British Columbia"
                        },
                        new
                        {
                            ID = 3,
                            CountriesID = 1,
                            Name = "Manitoba"
                        },
                        new
                        {
                            ID = 4,
                            CountriesID = 1,
                            Name = "New Brunswick"
                        },
                        new
                        {
                            ID = 5,
                            CountriesID = 1,
                            Name = "Newfoundland and Labrador"
                        },
                        new
                        {
                            ID = 6,
                            CountriesID = 1,
                            Name = "Northwest Territories"
                        },
                        new
                        {
                            ID = 7,
                            CountriesID = 1,
                            Name = "Nova Scotia"
                        },
                        new
                        {
                            ID = 8,
                            CountriesID = 1,
                            Name = "Nunavut"
                        },
                        new
                        {
                            ID = 9,
                            CountriesID = 1,
                            Name = "Ontario"
                        },
                        new
                        {
                            ID = 10,
                            CountriesID = 1,
                            Name = "Prince Edward Island"
                        },
                        new
                        {
                            ID = 11,
                            CountriesID = 1,
                            Name = "Quebec"
                        },
                        new
                        {
                            ID = 12,
                            CountriesID = 1,
                            Name = "Saskatchewan"
                        },
                        new
                        {
                            ID = 13,
                            CountriesID = 1,
                            Name = "Yukon"
                        },
                        new
                        {
                            ID = 14,
                            CountriesID = 2,
                            Name = "Alabama"
                        },
                        new
                        {
                            ID = 15,
                            CountriesID = 2,
                            Name = "Alaska"
                        },
                        new
                        {
                            ID = 16,
                            CountriesID = 2,
                            Name = "American Samoa"
                        },
                        new
                        {
                            ID = 17,
                            CountriesID = 2,
                            Name = "Arizona"
                        },
                        new
                        {
                            ID = 18,
                            CountriesID = 2,
                            Name = "Arkansas"
                        },
                        new
                        {
                            ID = 19,
                            CountriesID = 2,
                            Name = "California"
                        },
                        new
                        {
                            ID = 20,
                            CountriesID = 2,
                            Name = "Colorado"
                        },
                        new
                        {
                            ID = 21,
                            CountriesID = 2,
                            Name = "Connecticut"
                        },
                        new
                        {
                            ID = 22,
                            CountriesID = 2,
                            Name = "Delaware"
                        },
                        new
                        {
                            ID = 23,
                            CountriesID = 2,
                            Name = "Federated States of Micronesia"
                        },
                        new
                        {
                            ID = 24,
                            CountriesID = 2,
                            Name = "Florida"
                        },
                        new
                        {
                            ID = 25,
                            CountriesID = 2,
                            Name = "Georgia"
                        },
                        new
                        {
                            ID = 26,
                            CountriesID = 2,
                            Name = "Guam"
                        },
                        new
                        {
                            ID = 27,
                            CountriesID = 2,
                            Name = "Hawaii"
                        },
                        new
                        {
                            ID = 28,
                            CountriesID = 2,
                            Name = "Idaho"
                        },
                        new
                        {
                            ID = 29,
                            CountriesID = 2,
                            Name = "Illinois"
                        },
                        new
                        {
                            ID = 30,
                            CountriesID = 2,
                            Name = "Indiana"
                        },
                        new
                        {
                            ID = 31,
                            CountriesID = 2,
                            Name = "Iowa"
                        },
                        new
                        {
                            ID = 32,
                            CountriesID = 2,
                            Name = "Kansas"
                        },
                        new
                        {
                            ID = 33,
                            CountriesID = 2,
                            Name = "Kentucky"
                        },
                        new
                        {
                            ID = 34,
                            CountriesID = 2,
                            Name = "Louisiana"
                        },
                        new
                        {
                            ID = 35,
                            CountriesID = 2,
                            Name = "Maine"
                        },
                        new
                        {
                            ID = 36,
                            CountriesID = 2,
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            ID = 37,
                            CountriesID = 2,
                            Name = "Maryland"
                        },
                        new
                        {
                            ID = 38,
                            CountriesID = 2,
                            Name = "Massachusetts"
                        },
                        new
                        {
                            ID = 39,
                            CountriesID = 2,
                            Name = "Michigan"
                        },
                        new
                        {
                            ID = 40,
                            CountriesID = 2,
                            Name = "Minnesota"
                        },
                        new
                        {
                            ID = 41,
                            CountriesID = 2,
                            Name = "Mississippi"
                        },
                        new
                        {
                            ID = 42,
                            CountriesID = 2,
                            Name = "Missouri"
                        },
                        new
                        {
                            ID = 43,
                            CountriesID = 2,
                            Name = "Montana"
                        },
                        new
                        {
                            ID = 44,
                            CountriesID = 2,
                            Name = "Nebraska"
                        },
                        new
                        {
                            ID = 45,
                            CountriesID = 2,
                            Name = "Nevada"
                        },
                        new
                        {
                            ID = 46,
                            CountriesID = 2,
                            Name = "New Hampshire"
                        },
                        new
                        {
                            ID = 47,
                            CountriesID = 2,
                            Name = "New Jersey"
                        },
                        new
                        {
                            ID = 48,
                            CountriesID = 2,
                            Name = "New Mexico"
                        },
                        new
                        {
                            ID = 49,
                            CountriesID = 2,
                            Name = "New York"
                        },
                        new
                        {
                            ID = 50,
                            CountriesID = 2,
                            Name = "North Carolina"
                        },
                        new
                        {
                            ID = 51,
                            CountriesID = 2,
                            Name = "North Dakota"
                        },
                        new
                        {
                            ID = 52,
                            CountriesID = 2,
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            ID = 53,
                            CountriesID = 2,
                            Name = "Ohio"
                        },
                        new
                        {
                            ID = 54,
                            CountriesID = 2,
                            Name = "Oklahoma"
                        },
                        new
                        {
                            ID = 55,
                            CountriesID = 2,
                            Name = "Oregon"
                        },
                        new
                        {
                            ID = 56,
                            CountriesID = 2,
                            Name = "Palau"
                        },
                        new
                        {
                            ID = 57,
                            CountriesID = 2,
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            ID = 58,
                            CountriesID = 2,
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            ID = 59,
                            CountriesID = 2,
                            Name = "Rhode Island"
                        },
                        new
                        {
                            ID = 60,
                            CountriesID = 2,
                            Name = "South Carolina"
                        },
                        new
                        {
                            ID = 61,
                            CountriesID = 2,
                            Name = "South Dakota"
                        },
                        new
                        {
                            ID = 62,
                            CountriesID = 2,
                            Name = "Tennessee"
                        },
                        new
                        {
                            ID = 63,
                            CountriesID = 2,
                            Name = "Texas"
                        },
                        new
                        {
                            ID = 64,
                            CountriesID = 2,
                            Name = "U.S. Minor Outlying Islands"
                        },
                        new
                        {
                            ID = 65,
                            CountriesID = 2,
                            Name = "U.S. Virgin Islands"
                        },
                        new
                        {
                            ID = 66,
                            CountriesID = 2,
                            Name = "Utah"
                        },
                        new
                        {
                            ID = 67,
                            CountriesID = 2,
                            Name = "Vermont"
                        },
                        new
                        {
                            ID = 68,
                            CountriesID = 2,
                            Name = "Virginia"
                        },
                        new
                        {
                            ID = 69,
                            CountriesID = 2,
                            Name = "Washington"
                        },
                        new
                        {
                            ID = 70,
                            CountriesID = 2,
                            Name = "West Virginia"
                        },
                        new
                        {
                            ID = 71,
                            CountriesID = 2,
                            Name = "Wisconsin"
                        },
                        new
                        {
                            ID = 72,
                            CountriesID = 2,
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Reviews", b =>
                {
                    b.Property<string>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.SelectedGenres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GenresID")
                        .HasColumnType("int");

                    b.Property<int>("PreferencesID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GenresID");

                    b.HasIndex("PreferencesID");

                    b.ToTable("SelectedGenres");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.SelectedPlatforms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PlatformsID")
                        .HasColumnType("int");

                    b.Property<int>("PreferencesID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlatformsID");

                    b.HasIndex("PreferencesID");

                    b.ToTable("SelectedPlatforms");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.ShippingAddresses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AddressesID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AddressesID");

                    b.HasIndex("RegionsID");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Models.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PROG3050_HMJJ.Models.Genres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Action"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            ID = 3,
                            Name = "RPG"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Simulation"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Strategy"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Sports"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Puzzle"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Idle"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("PROG3050_HMJJ.Models.Platforms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "PS5"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Xbox"
                        },
                        new
                        {
                            ID = 3,
                            Name = "PC"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Android"
                        },
                        new
                        {
                            ID = 5,
                            Name = "iOS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050_HMJJ.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Addresses", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Account.User", "User")
                        .WithOne("Addresses")
                        .HasForeignKey("PROG3050_HMJJ.Areas.Member.Models.Addresses", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.MailingAddresses", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Addresses", "Addresses")
                        .WithMany()
                        .HasForeignKey("AddressesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Regions", "Regions")
                        .WithMany()
                        .HasForeignKey("RegionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Preferences", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguagesID");

                    b.HasOne("PROG3050_HMJJ.Models.Account.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("PROG3050_HMJJ.Areas.Member.Models.Preferences", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Profiles", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Account.User", "User")
                        .WithOne("Profiles")
                        .HasForeignKey("PROG3050_HMJJ.Areas.Member.Models.Profiles", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.Regions", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.SelectedGenres", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Genres", "Genres")
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Preferences", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genres");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.SelectedPlatforms", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Models.Platforms", "Platforms")
                        .WithMany()
                        .HasForeignKey("PlatformsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Preferences", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platforms");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Areas.Member.Models.ShippingAddresses", b =>
                {
                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Addresses", "Addresses")
                        .WithMany()
                        .HasForeignKey("AddressesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050_HMJJ.Areas.Member.Models.Regions", "Regions")
                        .WithMany()
                        .HasForeignKey("RegionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("PROG3050_HMJJ.Models.Account.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Preferences");

                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
